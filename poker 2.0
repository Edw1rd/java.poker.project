Main{
package poker;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

public class Main {
    static Random rand = new Random();
    static Scanner sc = new Scanner(System.in);
    static ArrayList<Integer> nums = new ArrayList<Integer>();
    static ArrayList<Character> chars = new ArrayList<Character>();
    static ArrayList<String> cardsToChange = new ArrayList<String>();

    static int[] playerCards = {0,0,0,0,0,0,0,0,0};
    static int[] computerCards = {0,0,0,0,0,0,0,0,0};

    static int moneyOnTheBet = 0;
    static int playerMoney = 1000;
    static int computerMoney = 1000;

    public static void main(String... args){
        System.out.println("    This is a game of Poker created by Atermon!");
        System.out.println("               Hope you enjoy :)");
        System.out.println("---------------------Welcome!---------------------");
        //Making the deck
        for(int i=1; i <= 13; i++){
            nums.add(i);
        }
        chars.add('H');
        chars.add('C');
        chars.add('S');
        chars.add('D');

        String a = "";

        for(char c : chars){
            for(int n : nums){
                a = Integer.toString(n);
                Cards.cards.add(c + a);
            }
        }
        Cards.remCards = Cards.cards; //cards is the deck, remCards are the currently remaining cards.
        //Finished the deck
        //Creation of player and the computer
        Player player = new Player();
        Player computer = new Player();
        Table table = new Table();

        while(playerMoney > 0 && computerMoney > 0) {
            System.out.println("------------------Start of Round!------------------");
            player.cards.addAll(table.cards);
            computer.cards.addAll(table.cards);
            standardBet();
            changeCards(player);
            betMore();
            check(player, computer);
            Cards.cards = new ArrayList<>();
            for(char c : chars){
                for(int n : nums){
                    a = Integer.toString(n);
                    Cards.cards.add(c + a);
                }
            }
            Cards.remCards = Cards.cards;
            moneyOnTheBet = 0;
            player = new Player();
            computer = new Player();
            table = new Table();
            System.out.println("-------------------End of Round!-------------------");
            System.out.println(playerMoney);
            System.out.println(computerMoney);
        }
        endGame();
    }

    static void endGame(){
        Scanner sc = new Scanner(System.in);
        if(playerMoney <= 0){
            System.out.println("You have lost all your money and cannot continue further...");
            System.out.println("Press Enter to exit.");
            String f = sc.next();
            System.exit(0); // Exit the program
        }
        else if(computerMoney <= 0){
            System.out.println("The computer has lost all its money. Congrats! You win!");
            System.out.println("Press Enter to exit.");
            String f = sc.next();
            System.exit(0); // Exit the program
        }
    }

    static void standardBet(){
        playerMoney -= 100;
        computerMoney -= 100;
        endGame();
        moneyOnTheBet +=200;
    }

    static void betMore(){
        Random rand = new Random();
        Scanner sc = new Scanner(System.in);
        System.out.println("If you want to bet more you can enter a number (0-"+playerMoney+")");
        int d = sc.nextInt();
        while(d > playerMoney){
            System.out.println("You don't have that much money! Enter a number again:");
            d = sc.nextInt();
        }
        playerMoney -= d;
        computerMoney -= d;
        moneyOnTheBet += 2*d;
        if(computerMoney < 0){
            System.out.println("The computer has lost all its money. Congrats! You win!");
            System.out.println("Press Enter to exit.");
            String f = sc.next();
            System.exit(0); // Exit the program
        }
        int r = rand.nextInt(10);
        if(r%4 == 0 && computerMoney >= 50){ //30% possibility (for cases when r is equal to 0, 4 or 8
            System.out.println("The computer decided to bet 50 more.");
            playerMoney -= 50;
            computerMoney -= 50;
            moneyOnTheBet += 100;
            if(playerMoney < 0){
                System.out.println("You have lost all your money and cannot continue further...");
                System.out.println("Press Enter to exit.");
                String f = sc.next();
                System.exit(0); // Exit the program
            }
            betMore();
        }
    }

    static void check(Player player, Player computer){
        playerCards[0] = Hands.straightFlush(player.cards);
        playerCards[1] = Hands.fourOfAKind(player.cards);
        playerCards[2] = Hands.fullHouse(player.cards);
        playerCards[3] = Hands.flush(player.cards);
        playerCards[4] = Hands.straight(player.cards);
        playerCards[5] = Hands.threeOfAKind(player.cards);
        playerCards[6] = Hands.twoPair(player.cards);
        playerCards[7] = Hands.pair(player.cards);
        playerCards[8] = Hands.highCard(player.cards);
        computerCards[0] = Hands.straightFlush(computer.cards);
        computerCards[1] = Hands.fourOfAKind(computer.cards);
        computerCards[2] = Hands.fullHouse(computer.cards);
        computerCards[3] = Hands.flush(computer.cards);
        computerCards[4] = Hands.straight(computer.cards);
        computerCards[5] = Hands.threeOfAKind(computer.cards);
        computerCards[6] = Hands.twoPair(computer.cards);
        computerCards[7] = Hands.pair(computer.cards);
        computerCards[8] = Hands.highCard(computer.cards);
        System.out.println(Arrays.toString(playerCards));
        System.out.println(Arrays.toString(computerCards));

        for(int i = 0; i < 9; i++){
            if(playerCards[i] > computerCards[i]){
                System.out.println("You win!");
                playerMoney += moneyOnTheBet;
                break;
            }
            else if (playerCards[i] < computerCards[i]){
                System.out.println("You lose!");
                computerMoney += moneyOnTheBet;
                break;
            }
            else{
                if(i == 8) {
                    System.out.println("It's a tie!");
                    playerMoney += moneyOnTheBet / 2;
                    computerMoney += moneyOnTheBet / 2;
                }
            }
        }
    }

    static void changeCards(Player p){
        System.out.println("Your cards are: " + p.cards);
        System.out.println("How many cards do you want to change? (Permitted: 0-2)");
        int per = sc.nextInt();
        while(!(per >=0 && per <=2)){
            System.out.println("The number of cards you can change is 0 to 2.");
            System.out.println("How many cards do you want to change? (Permitted: 0-2)");
            per = sc.nextInt();
        }

        for(int i = 1; i <= per; i++) {
            boolean b = true;
            while(b) {
                int counter = 0;
                if(i == 1) {
                    System.out.println("To change a card, type its type and number (ex. H1 or D12).");
                }
                else{
                    System.out.println("Pick a card:");
                }
                String ctc = sc.next();
                for (String s : p.cards) {
                    if (s.equals(ctc)) {
                        int i1 = rand.nextInt(Cards.remCards.size());
                        cardsToChange.add(Cards.remCards.get(i1));
                        b = false;
                        break;
                    }
                    else if (counter == 6 && s.equals(p.cards.get(p.cards.size() - 1))) {
                        System.out.println("This card doesn't exist in your deck");
                    }
                    counter++;
                }
                if(!b){
                    p.cards.remove(ctc);
                    Cards.remCards.add(ctc);
                    p.cards.add(cardsToChange.get(0));
                    Cards.remCards.remove(cardsToChange.get(0));
                    cardsToChange.remove(cardsToChange.get(0));
                }
            }
        }
        System.out.println("Your cards after the changes are: " + p.cards + "\n");
    }
}

}



Player{
package poker;

import java.util.ArrayList;
import java.util.Random;

public class Player {
    Random rand = new Random();
    ArrayList<String> cards = new ArrayList<String>();

    String card1;
    String card2;

    Player(){
        int i1 = rand.nextInt(Cards.remCards.size());
        this.card1 = Cards.remCards.get(i1);
        Cards.remCards.remove(i1);

        i1 = rand.nextInt(Cards.remCards.size());
        this.card2 = Cards.remCards.get(i1);
        Cards.remCards.remove(i1);

        cards.add(card1);
        cards.add(card2);
    }
}
}

Hands{
package poker;

import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;

public class Hands {

    static void split(ArrayList<String> l , String str) {
        String[] s = str.split("");
        if(s.length == 3){
            s[1] = s[1] + s[2];
        }
        l.add(s[0]);
        l.add(s[1]);
    }

    static int fourOfAKind(ArrayList<String> l){
        ArrayList<String> lc = new ArrayList<String>();
        int counter;
        String intToString;
        int num = 0;
        for(String s : l){
            split(lc,s);
        }
        for(int i = 1; i <=13 ;i++){
            counter = 0;
            intToString = String.valueOf(i);
            for(String s : lc){
                if(s.equals(intToString)){
                    counter++;
                }
            }
            if(counter >= 4){
                num = i;
                break;
            }
        }
        if(num == 1){
            return 14;
        }
        else {
            return num;
        }
    }

    static int threeOfAKind(ArrayList<String> l){
        ArrayList<String> lc = new ArrayList<String>();
        int counter;
        String intToString;
        int num = 0;
        for(String s : l){
            split(lc,s);
        }
        for(int i = 1; i <=13 ;i++){
            counter = 0;
            intToString = String.valueOf(i);
            for(String s : lc){
                if(s.equals(intToString)){
                    counter++;
                }
            }
            if(counter >= 3 && i == 1){
                num = 14;
                break;
            }
            else if(counter >= 3){
                num = i;
            }
        }
        return num;
    }

    static ArrayList<Integer> findPair(ArrayList<String> l){
        ArrayList<String> lc = new ArrayList<String>();
        ArrayList<Integer> allPairs = new ArrayList<Integer>();
        int counter;
        String intToString;
        int num = 0;
        for(String s : l){
            split(lc,s);
        }
        for(int i = 1; i <=13 ;i++){
            counter = 0;
            intToString = String.valueOf(i);
            for(String s : lc){
                if(s.equals(intToString)){
                    counter++;
                }
            }
            if(counter >= 2){
                allPairs.add(i);
            }
        }
        return allPairs;
    }

    static int twoPair(ArrayList<String> l){
        ArrayList<Integer> allPairs = findPair(l);

        if(allPairs.size() >= 2 && allPairs.contains(1)){
            return 14;
        }

        if(allPairs.size() > 2){
            if(allPairs.get(0) < allPairs.get(1) && allPairs.get(1) > allPairs.get(2)){
                return allPairs.get(1);
            }
            else if(allPairs.get(0) > allPairs.get(1) && allPairs.get(0) > allPairs.get(2)){
                return allPairs.get(0);
            }
            else{
                return allPairs.get(2);
            }
        }
        else if(allPairs.size() == 2){
            if(allPairs.get(0) < allPairs.get(1)){
                return allPairs.get(1);
            }
            else{
                return allPairs.get(0);
            }
        }
        return 0;
    }

    static int pair(ArrayList<String> l){
        ArrayList<Integer> allPairs = findPair(l);

        if(allPairs.contains(1)){
            return 14;
        }

        if(allPairs.size() == 1){
            return allPairs.get(0);
        }
        else if(allPairs.size() == 2){
            if(allPairs.get(0) < allPairs.get(1)){
                return allPairs.get(1);
            }
            else{
                return allPairs.get(0);
            }
        }
        else if(allPairs.size() == 3){
            if(allPairs.get(0) < allPairs.get(1) && allPairs.get(1) > allPairs.get(2)){
                return allPairs.get(1);
            }
            else if(allPairs.get(0) > allPairs.get(1) && allPairs.get(0) > allPairs.get(2)){
                return allPairs.get(0);
            }
            else{
                return allPairs.get(2);
            }
        }
        return 0;
    }

    static int flush(ArrayList<String> l){
        ArrayList<String> lc = new ArrayList<String>();
        int num = 0;
        for(String s : l){
            split(lc,s);
        }
        String[] tempArr = {"","","","","","",""};
        for(int i=0; i<14;i++){
            if(lc.indexOf(lc.get(i)) % 2 == 0){
                tempArr[i/2] = lc.get(i);
            }
        }
        Arrays.sort(tempArr);
        for(int k=0; k < 3; k++) {
            if (tempArr[k].equals(tempArr[k+1]) && tempArr[k].equals(tempArr[k+2]) && tempArr[k].equals(tempArr[k+3]) && tempArr[k].equals(tempArr[k+4])){
                num = 1;
                break;
            }
        }

        if(num == 1){ //Call the high card method, so that in case of conflict there is the declaration of the winner
            num = highCard(l);
        }
        return num;
    }

    static int straight(ArrayList<String> l){
        ArrayList<String> lc1 = new ArrayList<String>();  //final values
        ArrayList<String> lc = new ArrayList<String>();   //temporary values
        for(String s : l){
            split(lc,s);
        }
        int[] arr = {0,0,0,0,0,0,0};   //array for sorting
        for(String s : lc){
            if (lc.indexOf(s) % 2 == 1){    //As the numbers are elements with odd indices, we want to work with them
                lc1.add(s);
            }
        }
        for(int i = 0; i <=6; i++){
            arr[i] = Integer.parseInt(lc1.get(i));
        }
        Arrays.sort(arr);   //sort the array
        lc1 = new ArrayList<String>();
        for(int i =0; i <=6; i++){
            lc1.add(String.valueOf(arr[i]));   //After the sorting, enter to the final list
        }
        for(int i = 0; i <= 6; i++){
            if(arr[i] == 1){
                lc1.add("14");     //Checking for the case of 10,11,12,13,14 (10,J,Q,K,A). If 1 exists, add 14
            }
        }

        int counter = 0;   //counts for consecutive numbers
        String max = "0";   // the max of the consecutive numbers

        for(int i = 0; i <= lc1.size()-2; i++) {     //We want to stop at the second number from the end, due to the if statement
            if (Integer.parseInt(lc1.get(i)) == Integer.parseInt(lc1.get(1 + i)) - 1){
                counter++;
                if(counter == 4){   //4 consecutive pairs of consecutive numbers
                    max = lc1.get(i+1);   //max is the next value of the last
                    counter--;
                }
            }
            else{    //If at least a pair is not consecutive numbers, then counter = 0 (Or else in case of 1,2,3,4,13(,14) we would get counter = 4 although the numbers aren't consecutive)
                counter = 0;
            }
        }

        return Integer.parseInt(max);
    }

    static int straightFlush(ArrayList<String> l){
        int i = straight(l);
        int a = flush(l);
        int max = 0;
        if(i!=0 && a!=0){
            max = i;
        }
        return max;
    }

    static int fullHouse(ArrayList<String> l){
        ArrayList<Integer> i = findPair(l);
        int k = threeOfAKind(l);
        boolean b = false;
        for(int in : i){
            if(in != k){
                b = true;
                break;
            }
        }
        if(i.size()!=0 && k!=0 && b){
            return k;
        }
        return 0;
    }

    static int highCard(ArrayList<String> l){
        ArrayList<String> lc = new ArrayList<String>();
        int max = 0;
        for(String s : l){
            split(lc,s);
        }

        if(lc.contains("1")){
            return 14;
        }

        for(String s : lc){
            if(lc.indexOf(s) % 2 == 1 && Integer.parseInt(s) > max){
                max = Integer.parseInt(s);
            }
        }
        return max;
    }
}
}

Cards{
package poker;

import java.util.ArrayList;

public class Cards {
    static ArrayList<String> cards = new ArrayList<String>();
    static ArrayList<String> remCards = new ArrayList<String>();
}
}

Table{
package poker;

import java.util.ArrayList;
import java.util.Random;

public class Table {
    Random rand = new Random();
    ArrayList<String> cards = new ArrayList<String>();

    String card1;
    String card2;
    String card3;
    String card4;
    String card5;

    Table(){
        int i1 = rand.nextInt(Cards.remCards.size());
        this.card1 = Cards.remCards.get(i1);
        Cards.remCards.remove(i1);

        i1 = rand.nextInt(Cards.remCards.size());
        this.card2 = Cards.remCards.get(i1);
        Cards.remCards.remove(i1);

        i1 = rand.nextInt(Cards.remCards.size());
        this.card3 = Cards.remCards.get(i1);
        Cards.remCards.remove(i1);

        i1 = rand.nextInt(Cards.remCards.size());
        this.card4 = Cards.remCards.get(i1);
        Cards.remCards.remove(i1);

        i1 = rand.nextInt(Cards.remCards.size());
        this.card5 = Cards.remCards.get(i1);
        Cards.remCards.remove(i1);

        cards.add(card1);
        cards.add(card2);
        cards.add(card3);
        cards.add(card4);
        cards.add(card5);
    }
}
}
